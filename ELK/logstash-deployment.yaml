apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
        - name: logstash
          image: docker.elastic.co/logstash/logstash:7.14.1
          ports:
            - containerPort: 5044
            - containerPort: 9600
          env:
            - name: ELASTICSEARCH_HOSTS
              value: "http://elasticsearch:9200"
            - name: ELASTICSEARCH_USERNAME
              value: "elastic"
            - name: ELASTICSEARCH_PASSWORD
              value: "JCqMRkJeXOH8NLVKCYcf"
            - name: LS_JAVA_OPTS
              value: "-Xmx512m -Xms512m"
          volumeMounts:
            - name: config-volume
              mountPath: /usr/share/logstash/pipeline/
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: "purpose"
                    operator: In
                    values:
                      - "elk"
                  - key: "set"
                    operator: In
                    values:
                      - "ss-elk"
      volumes:
        - name: config-volume
          configMap:
            name: logstash-config
            items:
              - key: logstash-profile-service.conf
                path: logstash.conf
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
data:
  logstash-profile-service.conf: |
    input {
      beats {
        port => 5044
        ssl => false
      }
    }

    filter {
      if [event][module] == "gcp" {
        mutate {
          add_field => {
            "[@metadata][event_type]" => "%{[event][dataset]}"
          }
        }

        if [event][dataset] == "gcp.firewall" {
          elasticsearch {
            hosts => ["elasticsearch:9200"]
            user => "elastic"
            password => "JCqMRkJeXOH8NLVKCYcf"
            index => "gcp-infra-firewall-%{+YYYY.MM.dd}"
            ssl => false
          }
        } else if [event][dataset] == "gcp.vpcflow" {
          elasticsearch {
            hosts => ["elasticsearch:9200"]
            user => "elastic"
            password => "JCqMRkJeXOH8NLVKCYcf"
            index => "gcp-infra-vpcflow-%{+YYYY.MM.dd}"
            ssl => false
          }
        } else if [event][dataset] == "gcp.audit" {
          elasticsearch {
            hosts => ["elasticsearch:9200"]
            user => "elastic"
            password => "JCqMRkJeXOH8NLVKCYcf"
            index => "gcp-infra-audit-%{+YYYY.MM.dd}"
            ssl => false
          }
        }
      } else {
        # Application logs processing
        grok {
          match => { 
            "message" => [
              "%{TIME:timestamp} \[%{DATA:thread}\] %{LOGLEVEL:loglevel}\s+%{JAVAFILE:class} - %{GREEDYDATA:json_message}",
              "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:loglevel} %{JAVACLASS:class}: %{GREEDYDATA:json_message}",
              "%{LOGLEVEL:loglevel} %{GREEDYDATA:json_message}",
              "%{TIME:timestamp} \[%{DATA:thread}\] %{LOGLEVEL:loglevel}\s+%{JAVAFILE:class} - %{GREEDYDATA:log_message}",
              "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:loglevel} %{JAVACLASS:class}: %{GREEDYDATA:log_message}",
              "%{LOGLEVEL:loglevel} %{GREEDYDATA:log_message}"
            ] 
          }
          tag_on_failure => ["_grokparsefailure"]
        }

        if "_grokparsefailure" not in [tags] {
          mutate {
            add_field => { "logtype" => "%{loglevel}" }
          }
    
          if [logtype] == "ERROR" {
            mutate {
              add_field => { "error_flag" => "true" }
            }
          }
        } else {
          mutate {
            add_field => { "logtype" => "UNMATCHED" }
          }
        }

        if "_grokparsefailure" in [tags] {
          mutate {
            add_field => { "original_message" => "%{message}" }
          }
        }
      }
    }
    
    output {
      if [event][module] == "gcp" {
        if [event][dataset] == "gcp.firewall" {
          elasticsearch {
            hosts => ["elasticsearch:9200"]
            user => "elastic"
            password => "JCqMRkJeXOH8NLVKCYcf"
            index => "gcp-infra-firewall-%{+YYYY.MM.dd}"
            ssl => false
          }
        } else if [event][dataset] == "gcp.vpcflow" {
          elasticsearch {
            hosts => ["elasticsearch:9200"]
            user => "elastic"
            password => "JCqMRkJeXOH8NLVKCYcf"
            index => "gcp-infra-vpcflow-%{+YYYY.MM.dd}"
            ssl => false
          }
        } else if [event][dataset] == "gcp.audit" {
          elasticsearch {
            hosts => ["elasticsearch:9200"]
            user => "elastic"
            password => "JCqMRkJeXOH8NLVKCYcf"
            index => "gcp-infra-audit-%{+YYYY.MM.dd}"
            ssl => false
          }
        }
      } else if [fields][service] == "profile-service" {
        elasticsearch {
          user => "elastic"
          password => "JCqMRkJeXOH8NLVKCYcf"
          hosts => ["elasticsearch:9200"]
          index => "profile-service-logs"
          action => "create"
        }
      } else if [fields][service] == "utility-service" {
        elasticsearch {
          user => "elastic"
          password => "JCqMRkJeXOH8NLVKCYcf"
          hosts => ["elasticsearch:9200"]
          index => "utility-service-logs"
          action => "create"
        }
      } else if [fields][service] == "central-hub" {
        elasticsearch {
          user => "elastic"
          password => "JCqMRkJeXOH8NLVKCYcf"
          hosts => ["elasticsearch:9200"]
          index => "central-hub-logs"
          action => "create"
        }
      } else if [fields][service] == "product-service" {
        elasticsearch {
          user => "elastic"
          password => "JCqMRkJeXOH8NLVKCYcf"
          hosts => ["elasticsearch:9200"]
          index => "product-service-logs"
          action => "create"
        }
      } else if [fields][service] == "order-service" {
        elasticsearch {
          user => "elastic"
          password => "JCqMRkJeXOH8NLVKCYcf"
          hosts => ["elasticsearch:9200"]
          index => "order-service-logs"
          action => "create"
        }
      } else if [fields][service] == "otp-service" {
        elasticsearch {
          user => "elastic"
          password => "JCqMRkJeXOH8NLVKCYcf"
          hosts => ["elasticsearch:9200"]
          index => "otp-service-logs"
          action => "create"
        }
      } else {
        # Catch-all for unmatched logs
        elasticsearch {
          user => "elastic"
          password => "JCqMRkJeXOH8NLVKCYcf"
          hosts => ["elasticsearch:9200"]
          index => "unmatched-logs-%{+YYYY.MM.dd}"
          action => "create"
        }
      }
    }
  logstash.yml: |
    http.host: "0.0.0.0"
    http.port: 9600
    tcp.host: "0.0.0.0"
    tcp.port: 9600
---
apiVersion: v1
kind: Service
metadata:
  name: logstash
spec:
  selector:
    app: logstash
  ports:
    - protocol: TCP
      port: 5044
      targetPort: 5044